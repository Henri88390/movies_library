name: Full Stack CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  DOTNET_VERSION: "8.0.x"
  NODE_VERSION: "18.x"

jobs:
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache .NET packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore backend dependencies
        run: dotnet restore backend/backend.csproj

      - name: Build backend
        run: dotnet build backend/backend.csproj --no-restore --configuration Release

      - name: Restore test dependencies
        run: dotnet restore backend.Tests/backend.Tests.csproj

      - name: Build tests
        run: dotnet build backend.Tests/backend.Tests.csproj --no-restore --configuration Release

      - name: Run backend tests
        run: |
          dotnet test backend.Tests/backend.Tests.csproj \
            --no-build \
            --configuration Release \
            --verbosity normal \
            --logger "trx;LogFileName=backend-test-results.trx" \
            --collect:"XPlat Code Coverage" \
            --results-directory ./TestResults

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results
          path: TestResults/

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: TestResults/*/coverage.cobertura.xml
          flags: backend
          name: backend-coverage

  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: npm ci
        working-directory: ./frontend

      - name: Lint frontend code
        run: npm run lint
        working-directory: ./frontend
        continue-on-error: true

      - name: Build frontend
        run: npm run build
        working-directory: ./frontend

      - name: Run frontend tests
        run: npm run test -- --watch=false --browsers=ChromeHeadless --code-coverage
        working-directory: ./frontend

      - name: Upload frontend coverage
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  build-validation:
    name: Build Validation
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Build complete application
        run: |
          # Build backend
          dotnet restore backend/backend.csproj
          dotnet build backend/backend.csproj --configuration Release

          # Build frontend
          cd frontend
          npm ci
          npm run build --prod

      - name: Validate API endpoints
        run: |
          # Start the backend in background
          cd backend
          dotnet run --configuration Release &
          BACKEND_PID=$!

          # Wait for backend to start
          sleep 10

          # Test health endpoint (if exists) or basic endpoint
          curl -f http://localhost:5176/api/movies/movies || exit 1

          # Cleanup
          kill $BACKEND_PID

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run .NET security scan
        uses: security-code-scan/security-code-scan-action@v1
        with:
          project-path: backend/backend.csproj

      - name: Run npm audit
        run: |
          cd frontend
          npm audit --audit-level moderate
        continue-on-error: true
